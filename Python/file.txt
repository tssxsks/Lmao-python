Tôi có code game tàu bay gồm nhiều file code py như sau:
1. constants.py:
import pygame

# Khoi tao font
pygame.font.init()

# Dinh dang cua so
screen_width = 800
screen_height = 600

# Mau sac
black = (0, 0, 0)
white = (255, 255, 255)
red = (255, 0, 0)
green = (0, 255, 0)

# Dinh dang may bay
spaceship_width = 50
spaceship_height = 60
spaceship_speed = 5

# Dinh dang dan
bullet_speed = 7
bullet_width = 5
bullet_height = 10

# Dinh dang ke dich
enemy_speed = 3
enemy_width = 50
enemy_height = 50

# Cau hinh chi so game
max_health = 100
damage_per_collision = 20
lives = 3

# Font and clock
font = pygame.font.SysFont(None, 35)
clock = pygame.time.Clock()
high_score_file = "high_score.txt"

# Load hinh anh
player_image = pygame.image.load("player.png")
enemy_image = pygame.image.load("enemy.png")
bullet_image = pygame.image.load("bullets.png")

2. enemy.py:
import pygame
import random
from constants import *


class Enemy:
    def __init__(self):
        # Initialize enemy position at a random horizontal location above the screen
        self.rect = pygame.Rect(
            random.randint(0, screen_width - enemy_width),
            -enemy_height,
            enemy_width,
            enemy_height,
        )
        # Load enemy image
        self.image = pygame.image.load("enemy.png").convert_alpha()

    def move(self):
        # Move the enemy downwards
        self.rect.y += enemy_speed

    def draw(self, screen):
        # Draw the enemy image
        screen.blit(self.image, (self.rect.x, self.rect.y))

3. game.py:
import pygame
from player import Player
from enemy import Enemy
from high_score_manager import HighScoreManager
from constants import *
import random


class Game:
    def __init__(self):
        self.high_score_manager = HighScoreManager("high_score.txt")
        self.background_image = pygame.image.load(
            "background.png"
        ).convert()  # Load your background image

    def draw_text(self, text, x, y, screen, color=white):
        font = pygame.font.SysFont("Arial", 35)
        screen_text = font.render(text, True, color)
        screen.blit(screen_text, [x, y])

    def start_menu(self, screen):
        menu_running = True
        while menu_running:
            screen.blit(self.background_image, (0, 0))  # Draw background
            pygame.draw.rect(
                screen, (255, 255, 255), (150, 100, 500, 400), border_radius=10
            )  # Menu background

            self.draw_text("Space Shooter", screen_width // 2 - 100, 130, screen)

            buttons = [
                ("Play", (200, 200)),
                ("High Score", (200, 250)),
                ("Reset High Score", (200, 300)),
                ("Exit", (200, 350)),
            ]

            for text, (x, y) in buttons:
                button_rect = pygame.Rect(x, y, 400, 40)
                pygame.draw.rect(
                    screen, (0, 120, 215), button_rect, border_radius=5
                )  # Button background
                self.draw_text(text, x + 150, y + 5, screen, white)

            pygame.display.flip()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_1:
                        return "play"
                    if event.key == pygame.K_2:
                        return "high_score"
                    if event.key == pygame.K_3:
                        self.high_score_manager.reset_high_score()
                    if event.key == pygame.K_4:
                        pygame.quit()
                        quit()

                if event.type == pygame.MOUSEBUTTONDOWN:
                    mouse_pos = event.pos
                    for i, (_, (x, y)) in enumerate(buttons):
                        button_rect = pygame.Rect(x, y, 400, 40)
                        if button_rect.collidepoint(mouse_pos):
                            if i == 0:  # Play
                                return "play"
                            elif i == 1:  # High Score
                                return "high_score"
                            elif i == 2:  # Reset High Score
                                self.high_score_manager.reset_high_score()
                            elif i == 3:  # Exit
                                pygame.quit()
                                quit()

    def game_loop(self, screen):
        player = Player()
        enemies = []
        score = 0
        running = True

        while running:
            screen.blit(self.background_image, (0, 0))  # Draw background

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False

                if event.type == pygame.KEYUP:
                    if event.key == pygame.K_SPACE:
                        player.can_shoot = True

            keys = pygame.key.get_pressed()
            player.move(keys)

            if keys[pygame.K_SPACE]:
                player.shoot()

            player.update_bullets()

            if random.randint(0, 50) == 0:
                enemies.append(Enemy())

            for enemy in enemies:
                enemy.move()
                enemy.draw(screen)

            for bullet in player.bullets:
                for enemy in enemies:
                    if bullet.colliderect(enemy.rect):
                        player.bullets.remove(bullet)
                        enemies.remove(enemy)
                        score += 1
                        break

            for enemy in enemies:
                if enemy.rect.colliderect(
                    pygame.Rect(player.x, player.y, spaceship_width, spaceship_height)
                ):
                    enemies.remove(enemy)
                    if player.lose_health():
                        running = False

            enemies = [enemy for enemy in enemies if enemy.rect.y < screen_height]

            player.draw(screen)

            self.draw_text(f"Score: {score}", 10, 10, screen)
            self.draw_text(f"Lives: {player.lives}", 10, 80, screen)

            pygame.display.flip()
            clock.tick(60)

        return score

    def game_over_menu(self, score, screen):
        high_score = self.high_score_manager.high_score
        if score > high_score:
            high_score = score
            self.high_score_manager.save_high_score(score)

        game_over_running = True
        while game_over_running:
            screen.blit(self.background_image, (0, 0))  # Draw background
            self.draw_text("Game Over!", screen_width // 2 - 100, 100, screen)
            self.draw_text(f"Your Score: {score}", screen_width // 2 - 100, 200, screen)
            self.draw_text(
                f"High Score: {high_score}", screen_width // 2 - 100, 250, screen
            )
            self.draw_text("1. Retry", screen_width // 2 - 50, 300, screen)
            self.draw_text("2. Quit", screen_width // 2 - 50, 350, screen)
            pygame.display.flip()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_1:
                        return "retry"
                    if event.key == pygame.K_2:
                        pygame.quit()
                        quit()

    def show_high_score(self, screen):
        high_score_running = True
        while high_score_running:
            screen.blit(self.background_image, (0, 0))  # Draw background
            self.draw_text(
                f"High Score: {self.high_score_manager.high_score}",
                screen_width // 2 - 100,
                200,
                screen,
            )
            self.draw_text(
                "Press any key to return to the menu",
                screen_width // 2 - 150,
                300,
                screen,
            )
            pygame.display.flip()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                if event.type == pygame.KEYDOWN:
                    return

    def run(self, screen):
        while True:
            choice = self.start_menu(screen)

            if choice == "play":
                score = self.game_loop(screen)
                game_over_choice = self.game_over_menu(score, screen)
                if game_over_choice == "retry":
                    continue
                else:
                    break
            elif choice == "high_score":
                self.show_high_score(screen)


if __name__ == "__main__":
    pygame.init()
    screen = pygame.display.set_mode((screen_width, screen_height))
    game = Game()
    game.run(screen)
    pygame.quit()

4. high_score_manager.py:
import os


class HighScoreManager:
    def __init__(self, filename):
        self.filename = filename
        self.high_score = self.load_high_score()

    def load_high_score(self):
        # Load diem ki luc tu file, hoac tao file diem ki luc neu khong ton tai
        if not os.path.exists(self.filename):
            with open(self.filename, "w") as file:
                file.write("0")
        with open(self.filename, "r") as file:
            return int(file.read().strip())

    def save_high_score(self, score):
        # Luu dien vao file
        with open(self.filename, "w") as file:
            file.write(str(score))

    def reset_high_score(self):
        # Reset diem cao
        self.save_high_score(0)
        self.high_score = 0

5. player.py:
import pygame
from constants import *  # Ensure you import necessary constants


class Player:
    def __init__(self):
        self.x = screen_width // 2
        self.y = screen_height - spaceship_height - 10
        self.speed = spaceship_speed
        self.bullets = []
        self.health = max_health
        self.lives = lives
        self.can_shoot = True

        # Load player image
        self.image = pygame.image.load(
            "player.png"
        ).convert_alpha()  # Ensure this path is correct
        self.width = self.image.get_width()
        self.height = self.image.get_height()

        # Load bullet image
        self.bullet_image = pygame.image.load(
            "bullets.png"
        ).convert_alpha()  # Ensure this path is correct
        self.bullet_width = self.bullet_image.get_width()
        self.bullet_height = self.bullet_image.get_height()

    def move(self, keys):
        if keys[pygame.K_LEFT] and self.x > 0:
            self.x -= self.speed
        if keys[pygame.K_RIGHT] and self.x < screen_width - self.width:
            self.x += self.speed

    def shoot(self):
        if self.can_shoot:
            bullet = pygame.Rect(
                self.x + self.width // 2 - self.bullet_width // 2,
                self.y,
                self.bullet_width,
                self.bullet_height,
            )
            self.bullets.append(bullet)
            self.can_shoot = False  # Prevent further shooting until key is released

    def draw(self, screen):
        # Draw the player image
        screen.blit(self.image, (self.x, self.y))

        # Draw bullets using the bullet image
        for bullet in self.bullets:
            screen.blit(self.bullet_image, (bullet.x, bullet.y))

        # Draw health bar
        pygame.draw.rect(screen, green, (10, 50, self.health * 2, 20))

    def update_bullets(self):
        for bullet in self.bullets:
            bullet.y -= bullet_speed
        self.bullets = [
            bullet for bullet in self.bullets if bullet.y > 0
        ]  # Remove off-screen bullets

    def lose_health(self):
        self.health -= damage_per_collision
        if self.health <= 0:
            self.lives -= 1
            self.health = max_health
            if self.lives <= 0:
                return True  # Player is out of lives
        return False  # Player is still alive

6. main.py:
import pygame
from game import Game
from constants import *

if __name__ == "__main__":
    pygame.init()

    # Tao cua so
    screen = pygame.display.set_mode((screen_width, screen_height))

    # Khoi tao tien trinh game
    game = Game()

    # Chay game
    game.run(screen)

    # Thoat game
    pygame.quit()